name: CI for Monorepo

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE_FE: ardialqlause/fe-emailprovider

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      smtpserver: ${{ steps.filter.outputs.smtpserver }}
    steps:
      - uses: actions/checkout@v4
      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            smtpserver:
              - 'SMTPServer/**'

  frontend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_FE }}:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 92.113.145.8 >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ardial@92.113.145.8 '
            sudo bash -c "
              # Pull the latest image
              docker pull ${{ env.DOCKER_IMAGE_FE }}:prod
              
              docker stop fe-emailprovider 2>/dev/null || true
              docker rm fe-emailprovider 2>/dev/null || true
              
              port_containers=$(docker ps -q --filter "publish=4001")
              if [ -n "$port_containers" ]; then
                docker stop $port_containers
                docker rm $port_containers
              fi
              
              lsof -ti:4001 | xargs kill -9 2>/dev/null || true
              
              sleep 2
              
              docker container prune -f
              docker image prune -f
              
              docker run -d \
                --name fe-emailprovider \
                --restart unless-stopped \
                -p 127.0.0.1:4001:4001 \
                ${{ env.DOCKER_IMAGE_FE }}:prod
            "
          '
